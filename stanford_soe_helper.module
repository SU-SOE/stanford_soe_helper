<?php

/**
 * @file
 * Code for the Stanford SOE Helper module.
 */

/**
 * Implements hook_init().
 */
function stanford_soe_helper_init() {

  // Add css files
  $file_paths = array(
    drupal_get_path('module', 'stanford_soe_helper') . "/css/soe_helper.css",
    drupal_get_path('module', 'stanford_soe_helper') . "/css/stanford_news_layouts.css"
  );

  $weight = 9999;
  $conditions = "admin
admin*
admin/*
node/*/edit
block/*/edit*
block/add*
node/add*
user/*/edit
node/*/delete";

  $css_rules = array();
  $css_rules['rule_conditions'] = $conditions;
  $css_rules['rule_type'] = CSS_INJECTOR_PAGES_NOTLISTED;

  $pass = _css_injector_evaluate_rule($css_rules);
  if ($pass) {
    foreach ($file_paths as $file_path) {

      drupal_add_css($file_path, array(
        'type' => 'file',
        'group' => CSS_THEME,
        'media' => "all",
        'preprocess' => TRUE,
        'weight' => $weight
      ));
      $weight = $weight++;
    }
  }
}


/**
 * Implements hook__search_api_alter_callback_info().
 */

function stanford_soe_helper_search_api_alter_callback_info() {
  // This will appear as an option in the UI of Search API, in the Data alterations section.
  $callbacks['exclude_some_nodes'] = array(
    'name' => t('Exclude some nodes'), 
    'description' => t('Exclude some nodes from being indexed based on one field value: ApacheSolr Index'),
    'class' => 'SearchApiExcludeSomeNodes',
  );
  return $callbacks;
}

class SearchApiExcludeSomeNodes extends SearchApiAbstractAlterCallback {

  public function supportsIndex(SearchApiIndex $index) {
    return $index->getEntityType() === 'node';
  }

  public function alterItems(array &$items) {
    foreach ($items as $k => $item) {
      if(isset($item->field_s_apachesolr_index['und'][0]['value']) && $item->field_s_apachesolr_index['und'][0]['value'] == '1') {
        unset($items[$k]);
      }
    }
  }

}
