<?php

/**
 * @file
 * Code for the Stanford SoE Helper Sitewide feature.
 */

include_once 'stanford_soe_helper_sitewide.features.inc';

/**
 * Implements hook_block_info().
 */
function stanford_soe_helper_sitewide_block_info() {
  $blocks = array();
  $blocks['stanford_soe_intranet_link'] = array(
    'info' => t('Stanford SoE Intranet Link'),
  );

  return $blocks;
}

/**
 * Default settings wrapper for variable_get.
 *
 * @return array
 *   Return the settings for this module.
 */
function stanford_soe_helper_sitewide_get_settings() {
  $default_settings = array(
    'intranet_link_title' => t('Intranet'),
    'intranet_link_url' => 'https://insidesoe.stanford.edu/',
  );
  $settings = variable_get('stanford_soe_helper_sitewide_settings', $default_settings);

  return $settings;
}

/**
 * Implements hook_block_view().
 */
function stanford_soe_helper_sitewide_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'stanford_soe_intranet_link':
      $block['content'] = soe_helper_sitewide_link_block_view();
      break;
  }

  return $block;
}

/**
 * Callback for displaying the intranet link block.
 */
function soe_helper_sitewide_link_block_view() {
  $settings = stanford_soe_helper_sitewide_get_settings();
  $block = array(
    'intranet_link' => array(
      '#type' => 'markup',
      '#markup' => l($settings['intranet_link_title'],
        $settings['intranet_link_url'],
        array('attributes' => array('class' => 'private-link btn'))),
    ),
  );
  return $block;
}

/**
 * Add a taxonomy field to a content type (bundle).
 *
 * @param string $field_name
 *   The new field name to be added to the content type.
 * @param string $tax_name
 *   Taxonomy associated with the new field.
 * @param string $bundle
 *   Content type getting the new field.
 */
function stanford_soe_helper_sitewide_add_tax_field($field_name, $tax_name, $bundle, $label = 'Accent color') {

  $tax = taxonomy_vocabulary_machine_name_load($tax_name);
  if ($tax) {

    // Make sure the field doesn't already exist.
    if (field_info_field($field_name)) {
      watchdog('stanford_soe_helper_sitewide',
        '!field_name already exists.',
        array('!field_name' => $field_name));
    }
    else {
      // Create the field.
      $field_base = array(
        'field_name' => $field_name,
        'active' => 1,
        'cardinality' => 1,
        'deleted' => 0,
        'entity_types' => array(),
        'indexes' => array(
          'tid' => array(
            0 => 'tid',
          ),
        ),
        'locked' => 0,
        'module' => 'taxonomy',
        'settings' => array(
          'allowed_values' => array(
            0 => array(
              'vocabulary' => $tax_name,
              'parent' => 0,
            ),
          ),
        ),
        'translatable' => 0,
        'type' => 'taxonomy_term_reference',
      );
      field_create_field($field_base);

      // Create the instance.
      $field_instance = array(
        'bundle' => $bundle,
        'default_value' => NULL,
        'deleted' => 0,
        'description' => 'These terms identify the associated accent color. Select a color.',
        'display' => array(
          'default' => array(
            'label' => 'hidden',
            'module' => 'taxonomy',
            'settings' => array(),
            'type' => 'taxonomy_term_reference_link',
            'weight' => 0,
          ),
          'full' => array(
            'label' => 'hidden',
            'module' => 'taxonomy',
            'settings' => array(),
            'type' => 'taxonomy_term_reference_link',
            'weight' => 0,
          ),
          'teaser' => array(
            'label' => 'above',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => 6,
          ),
        ),
        'entity_type' => 'node',
        'field_name' => $field_name,
        'label' => $label,
        'required' => 1,
        'settings' => array(
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 1,
          'module' => 'options',
          'settings' => array(),
          'type' => 'options_buttons',
          'weight' => 8,
        ),

      );

      $success = TRUE;
      try {
        field_create_instance($field_instance);
      } catch (Exception $e) {
        echo 'Caught exception: ',  $e->getMessage(), "\n";
        watchdog('stanford_soe_helper_sitewide',
          'Error adding !field_name',
          array('!field_name' => $field_name));
        $success = FALSE;
      }
      if ($success) {
        watchdog('stanford_soe_helper_sitewide',
          '!field_name was added successfully.',
          array('!field_name' => $field_name));
      }
    }
  }
}

/**
 * Custom user_role_grant_permissions function.
 *
 * Does the same thing as user_role_grant_permissions
 * but it can run at install time.
 *
 * This is copied from stanford_bean_types_permissions.
 * See also: user_role_grant_permissions.
 *
 * @param int $rid
 *   Role id.
 * @param array $permissions
 *   Permissions to add.
 */
function _stanford_soe_helper_sitewide_grant_permissions($rid, array $permissions = array()) {
  // This line doesn't work on install / enable hooks
  // $modules = user_permission_get_modules();
  // Grant new permissions for the role.
  if (lock_acquire($rid . '_stanford_soe_helper_sitewide_grant_permissions', 600.0)) {
    foreach ($permissions as $module => $permission_list) {
      foreach ($permission_list as $name) {
        db_merge('role_permission')
          ->key(array(
            'rid' => $rid,
            'permission' => $name,
          ))
          ->fields(array(
            'module' => $module,
          ))
          ->execute();
      }
    }
    lock_release($rid . '_stanford_soe_helper_sitewide_grant_permissions');
  }
  // Clear the user access cache.
  drupal_static_reset('user_access');
  drupal_static_reset('user_role_permissions');
}
